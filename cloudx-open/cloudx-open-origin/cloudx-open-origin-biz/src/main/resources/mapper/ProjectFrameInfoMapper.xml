<?xml version="1.0" encoding="UTF-8"?>


<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.aurine.cloudx.open.origin.mapper.ProjectFrameInfoMapper">

    <resultMap id="frameInfoMap" type="com.aurine.cloudx.open.origin.entity.ProjectFrameInfo">
        <!--                  <id property="seq" column="seq"/>-->
        <id property="entityId" column="entityId"/>
        <result property="entityCode" column="entityCode"/>
        <!--                        <result property="projectId" column="projectId"/>-->
        <result property="entityName" column="entityName"/>
        <result property="puid" column="puid"/>
        <result property="isBuilding" column="isBuilding"/>
        <result property="isUnit" column="isUnit"/>
        <result property="isHouse" column="isHouse"/>
        <result property="level" column="level"/>
        <!--                        <result property="tenantId" column="tenant_id"/>-->
        <result property="operator" column="operator"/>
        <result property="createTime" column="createTime"/>
        <result property="updateTime" column="updateTime"/>
    </resultMap>

    <select id="getFrameInfoById" parameterType="string" resultType="string">
        with recursive r as
                           (
                               select *
                               from project_frame_info pfi
                               where pfi.entityId = #{entityId}
                               union all
                               select pfi.*
                               from project_frame_info pfi,
                                    r
                               where pfi.entityId = r.puid
                           )
        select GROUP_CONCAT(entityName)
        from r
        GROUP BY projectId;
    </select>


    <select id="listFrameAndPersonCounts" resultType="com.aurine.cloudx.open.origin.dto.ProjectFrameCountDTO">
        with recursive r as
        (

        <if test="entityId != null and entityId != ''">
            select * from project_frame_info s1 where s1.entityid = #{entityId}
            union all
            select s1.* from project_frame_info s1, r where s1.puid = r.entityid
        </if>

        <if test="entityId == null or entityId == ''">
            select * from project_frame_info where 1=1 and tenant_id = #{tenantId} and projectid = #{projectId}
        </if>


        ) select count(*) as entityCount,level,sum(rel.personCount) as personCount from r

        left join (select count(*) as personCount,pl.houseid from project_house_person_rel pl where auditStatus = 2
        group by pl.houseid) rel
        on r.entityId = rel.houseId

        where 1=1 and r.level   <![CDATA[<]]>  4 group by level;
    </select>

    <select id="getHouseIdByAddressNotGroup" resultType="java.lang.String">
        SELECT houseId
        FROM (
                 SELECT CONCAT(building.entityName, '-', unit.entityName, '-', house.entityName) address,
                        house.entityId                                                           houseId
                 FROM project_frame_info house
                          LEFT JOIN project_frame_info unit ON unit.entityId = house.puid
                          LEFT JOIN project_frame_info building ON building.entityId = unit.puid
                 WHERE house.`isHouse` = 1) AS houseAddress
        WHERE houseAddress.address = #{address}

    </select>

    <select id="getHouseIdByAddressGroup" resultType="java.lang.String">
        SELECT DISTINCT houseId
        FROM (
                 SELECT house.entityId houseId,
                        (
                            with recursive r as (
                                select *
                                from project_frame_info pfi
                                where pfi.entityId = house.entityId
                                union all
                                select pfi.*
                                from project_frame_info pfi,
                                     r
                                where pfi.entityId = r.puid
                            )
                            select group_concat(
                                           r.entityName order by
                                           level desc SEPARATOR '-'
                                       )
                            from r
                            GROUP BY projectId
                            ORDER BY level
                        )              address
                 FROM project_frame_info AS house
                          LEFT JOIN project_frame_info AS unit ON unit.entityId = house.puid
                          LEFT JOIN project_frame_info AS building ON building.entityId = unit.puid
                          LEFT JOIN project_house_person_rel ON house.entityId = project_house_person_rel.houseId
                          LEFT JOIN project_person_info
                                    ON project_person_info.personId = project_house_person_rel.personId
             ) houseAddressTable
        where address = #{address}
    </select>

    <select id="getHouseIDAndAddressInfoGroup" resultType="com.aurine.cloudx.open.origin.vo.ProjectHouseAddressVo">
        SELECT DISTINCT *
        FROM (
                 SELECT house.entityId houseId,
                        (
                            with recursive r as (
                                select *
                                from project_frame_info pfi
                                where pfi.entityId = house.entityId
                                union all
                                select pfi.*
                                from project_frame_info pfi,
                                     r
                                where pfi.entityId = r.puid
                            )
                            select group_concat(
                                           r.entityName order by
                                           level desc SEPARATOR '-'
                                       )
                            from r
                            GROUP BY projectId
                            ORDER BY level
                        )              address
                 FROM project_frame_info AS house
                          LEFT JOIN project_frame_info AS unit ON unit.entityId = house.puid
                          LEFT JOIN project_frame_info AS building ON building.entityId = unit.puid
                          LEFT JOIN project_house_person_rel ON house.entityId = project_house_person_rel.houseId
                          LEFT JOIN project_person_info
                                    ON project_person_info.personId = project_house_person_rel.personId
                 WHERE house.projectId = #{projectId}
             ) houseAddressTable
    </select>


    <select id="getHouseIDAndAddressInfo" resultType="com.aurine.cloudx.open.origin.vo.ProjectHouseAddressVo">
        SELECT DISTINCT *
        FROM (
                 SELECT CONCAT(building.entityName, '-', unit.entityName, '-', house.entityName) address,
                        house.entityId                                                           houseId
                 FROM project_frame_info AS house
                          LEFT JOIN project_frame_info unit ON unit.entityId = house.puid
                          LEFT JOIN project_frame_info building ON building.entityId = unit.puid
                 WHERE house.`isHouse` = 1
                   AND house.projectId = #{projectId}
             ) AS houseAddress
    </select>

    <select id="getByLevel" resultType="com.aurine.cloudx.open.origin.entity.ProjectFrameInfo">
        select info.entityId,
               info.entityCode,
               info.projectId,
               case
                   when info.level = 3 then (
                       with recursive r as
                                          (
                                              select *
                                              from project_frame_info pfi
                                              where pfi.entityId = info.entityId
                                              union all
                                              select pfi.*
                                              from project_frame_info pfi,
                                                   r
                                              where pfi.entityId = r.puid
                                          )
                       select group_concat(r.entityName order by level desc SEPARATOR '-')
                       from r
                       GROUP BY projectId
                       ORDER BY level
                   )
                   else info.entityName end entityName,
               info.puid,
               info.isBuilding,
               info.isUnit,
               info.isHouse,
               info.level,
               info.tenant_id,
               info.operator,
               info.createTime,
               info.updateTime
        from project_frame_info info
        where info.level <![CDATA[<=]]> #{level}
        order by info.createTime
    </select>
    <select id="listByPuid" resultType="com.aurine.cloudx.open.origin.entity.ProjectFrameInfo">
        SELECT *
        FROM project_frame_info
        where puid = #{puid}
        ORDER BY regexp_replace(entityName, '[^0-9]', '') + 0, entityName
    </select>
    <select id="countByProjectIdAndCode" resultType="java.lang.Integer">
        select count(*)
        from project_frame_info
        where entityCode = #{frameCode}
          and projectId = #{projectId}
    </select>
    <select id="getByCode" resultType="com.aurine.cloudx.open.origin.vo.ProjectFrameInfoVo">
        select *
        from project_frame_info
        where entityCode = #{frameCode}
          and projectId = #{projectId}
    </select>
    <select id="getCountByIndoor" resultType="java.lang.Integer">
        with recursive child_frame as
        (
        select pfi.* from project_frame_info pfi
        where 1=1
        <if test="ids!=null and ids.size>0">
            and pfi.entityId in
            <foreach collection="ids" item="id" open="(" close=")" separator=",">
                #{id}
            </foreach>
            or pfi.projectId in
            <foreach collection="ids" item="id" open="(" close=")" separator=",">
                #{id}
            </foreach>
        </if>
        union all
        select t1.* from project_frame_info t1, child_frame t2 where t1.puid = t2.entityId
        )
        select count( DISTINCT f.entityId) from child_frame f where f.isHouse ='1' and exists (select 1 from
        project_house_person_rel rel where rel.houseId=f.entityId )
    </select>

    <select id="getCheckedIndoorId" resultType="String">
        with recursive child_frame as
        (
        select pfi.* from project_frame_info pfi
        where 1=1
        <if test="ids!=null and ids.size>0">
            and pfi.entityId in
            <foreach collection="ids" item="id" open="(" close=")" separator=",">
                #{id}
            </foreach>
            or pfi.projectId in
            <foreach collection="ids" item="id" open="(" close=")" separator=",">
                #{id}
            </foreach>
        </if>
        union all
        select t1.* from project_frame_info t1, child_frame t2 where t1.puid = t2.entityId
        )
        select DISTINCT f.entityId from child_frame f where f.isHouse ='1' and exists (select 1 from
        project_house_person_rel rel where rel.houseId=f.entityId )
    </select>

    <select id="getFrameInfoByPerson" resultType="com.aurine.cloudx.open.origin.vo.ProjectDeviceSelectTreeVo">
        select frame.entityId   id,
               frame.entityName name,
               frame.projectId  parentId,
               frame.isHouse    type
        from project_frame_info frame
        where frame.isBuilding = 1
          and frame.projectId = #{puid}
        union all
        select frame1.entityId   id,
               frame1.entityName name,
               frame1.puid       parentId,
               frame1.isHouse    type
        from project_frame_info frame1
        where frame1.isUnit = 1
          and frame1.puid = #{puid}
        union all
        select frame2.entityId   id,
               frame2.entityName name,
               frame2.puid       parentId,
               frame2.isHouse    type
        from project_frame_info frame2
        where frame2.isHouse = 1
          and frame2.puid = #{puid}
          and exists(select 1 from project_house_person_rel rel where rel.houseId = frame2.entityId)
        ORDER BY name
    </select>
    <select id="getAllFrameInfosOnPerson" resultType="com.aurine.cloudx.open.origin.vo.ProjectDeviceSelectTreeVo">
        select frame.entityId   id,
               frame.entityName name,
               frame.projectId  parentId,
               frame.isHouse    type
        from project_frame_info frame
        where frame.isBuilding = 1
        union all
        select frame1.entityId   id,
               frame1.entityName name,
               frame1.puid       parentId,
               frame1.isHouse    type
        from project_frame_info frame1
        where frame1.isUnit = 1
        union all
        select frame2.entityId   id,
               frame2.entityName name,
               frame2.puid       parentId,
               frame2.isHouse    type
        from project_frame_info frame2
        where frame2.isHouse = 1
          and exists(select 1 from project_house_person_rel rel where rel.houseId = frame2.entityId)
    </select>

    <select id="getFullFrameNameByEntityId" resultType="java.lang.String">
        with recursive tempTable as
        (
        select * from project_frame_info s1 where s1.entityId = #{entityId}
        union all
        select s1.* from project_frame_info s1, tempTable where s1.entityId = tempTable.puid

        ) select GROUP_CONCAT(entityName order by level desc separator #{separator} ) frameName from tempTable

        <where>

            <if test="beginLevel != null ">
                and tempTable.level  <![CDATA[>=]]> #{beginLevel}
            </if>

            <if test="endLevel != null ">
                and tempTable.level  <![CDATA[<=]]> #{endLevel}
            </if>
        </where>
    </select>
    <select id="listHouseNameByBuildingId" resultType="java.lang.String">
        with recursive r as
                           (
                               select *
                               from project_frame_info pfi
                               where pfi.entityId = #{buildingId}
                               union all
                               select pfi.*
                               from project_frame_info pfi,
                                    r
                               where pfi.puid = r.entityId
                           )
        select entityName
        from r
        where r.level = 1
    </select>

    <insert id="saveFrame">
        INSERT
        INTO project_frame_info
        (entityId, entityCode, frameNo, projectId, entityName, puid, isBuilding, isUnit, isHouse, level, tenant_id,
         operator)
        VALUES (#{frameInfo.entityId},
                #{frameInfo.entityCode},
                #{frameInfo.frameNo},
                #{frameInfo.projectId},
                #{frameInfo.entityName},
                #{frameInfo.puid},
                #{frameInfo.isBuilding},
                #{frameInfo.isUnit},
                #{frameInfo.isHouse},
                #{frameInfo.level},
                #{frameInfo.tenantId},
                #{frameInfo.operator})

    </insert>

    <select id="countFrameInfo" resultType="java.lang.Integer">
        SELECT count(0)
        FROM project_frame_info t
        WHERE projectid = #{projectId}
          AND isBuilding = 1
    </select>

    <select id="getBuildingId" resultType="java.lang.String">
        SELECT buildingId
        FROM (
                 SELECT (
                            WITH recursive r AS (
                                SELECT *
                                FROM project_frame_info pfi
                                WHERE pfi.entityId = building.entityId
                                UNION ALL
                                SELECT pfi.*
                                FROM project_frame_info pfi,
                                     r
                                WHERE pfi.entityId = r.puid
                            )
                            SELECT group_concat(r.entityName ORDER BY LEVEL DESC SEPARATOR '-')
                            FROM r
                            GROUP BY projectId
                            ORDER BY LEVEL
                        ) buildingName,
                        building.entityId buildingId
                 FROM project_frame_info building
                 WHERE building.isBuilding = '1'
             ) building_info
        WHERE buildingName = #{buildingName} LIMIT 1
    </select>

    <select id="getAllFrameInfo" resultType="com.aurine.cloudx.open.origin.vo.FrameInfo">
        SELECT
            (
                WITH recursive r AS (
                    SELECT
                        *
                    FROM
                        project_frame_info pfi1
                    WHERE
                        pfi1.entityId = frame.entityId UNION ALL
                    SELECT
                        pfi2.*
                    FROM
                        project_frame_info pfi2,
                        r
                    WHERE
                        pfi2.entityId = r.puid
                ) SELECT
                    group_concat( r.entityName ORDER BY `level` DESC SEPARATOR ',' )
                FROM
                    r
                GROUP BY
                    projectId
                LIMIT 1
            ) frameName, frame.entityId
        FROM
            project_frame_info frame
        WHERE
            `level` > 3
    </select>

    <select
            id="page"
            parameterType="com.aurine.cloudx.open.origin.entity.ProjectFrameInfo"
            resultType="com.aurine.cloudx.open.common.entity.vo.FrameInfoVo"
    >
        SELECT
        *
        FROM project_frame_info pfi
        <where>
            <if test="query.projectId != null">
                AND pfi.projectId = #{query.projectId}
            </if>
            <if test="query.tenantId != null">
                AND pfi.tenantId = #{query.tenantId}
            </if>
            <if test="query.entityId != null and query.entityId != ''">
                AND pfi.entityId = #{query.entityId}
            </if>
            <if test="query.entityCode != null and query.entityCode != ''">
                AND pfi.entityCode = #{query.entityCode}
            </if>
            <if test="query.frameNo != null and query.frameNo != ''">
                AND pfi.frameNo = #{query.frameNo}
            </if>
            <if test="query.entityName != null and query.entityName != ''">
                AND pfi.entityName LIKE concat('%', #{query.entityName}, '%')
            </if>
            <if test="query.puid != null and query.puid != ''">
                AND pfi.puid = #{query.puid}
            </if>
            <if test="query.isBuilding != null and query.isBuilding != ''">
                AND pfi.isBuilding = #{query.isBuilding}
            </if>
            <if test="query.isUnit != null and query.isUnit != ''">
                AND pfi.isUnit = #{query.isUnit}
            </if>
            <if test="query.isHouse != null and query.isHouse != ''">
                AND pfi.isHouse = #{query.isHouse}
            </if>
            <if test="query.level != null">
                AND pfi.level = #{query.level}
            </if>
        </where>
    </select>

</mapper>
