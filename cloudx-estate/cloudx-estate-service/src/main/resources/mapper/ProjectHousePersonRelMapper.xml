<?xml version="1.0" encoding="UTF-8"?>


<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.aurine.cloudx.estate.mapper.ProjectHousePersonRelMapper">

    <resultMap id="projectHousePersonRelMap" type="com.aurine.cloudx.estate.entity.ProjectHousePersonRel">
        <id property="relaId" column="relaId"/>
        <result property="relaCode" column="relaCode"/>
        <result property="houseId" column="houseId"/>
        <result property="personId" column="personId"/>
        <result property="housePeopleRel" column="housePeopleRel"/>
        <result property="isOwner" column="isOwner"/>
        <result property="status" column="status"/>
        <result property="operator" column="operator"/>
        <result property="createTime" column="createTime"/>
        <result property="updateTime" column="updateTime"/>
    </resultMap>

    <select id="select" resultType="com.aurine.cloudx.estate.vo.ProjectHousePersonRelRecordVo">
        SELECT * FROM (
            SELECT
            unit.entityName 'unitName',
            house.entityName 'houseName',
            building.entityId 'buildingId',
            project_person_info.personName,
            project_person_info.gender,
            project_person_info.telephone,
            project_house_person_rel.*,
            (
            with recursive r as
            (
            select * from project_frame_info pfi where pfi.entityId = building.entityId
            union all
            select pfi.* from project_frame_info pfi, r where pfi.entityId = r.puid
            ) select group_concat(r.entityName order by level desc SEPARATOR '-') from r GROUP BY projectId ORDER BY level
            ) buildingName
            FROM
            project_frame_info AS house
            INNER JOIN project_frame_info AS unit ON unit.entityId = house.puid
            INNER JOIN project_frame_info AS building ON building.entityId = unit.puid
            INNER JOIN project_house_person_rel ON house.entityId = project_house_person_rel.houseId
            INNER JOIN project_person_info ON project_person_info.personId = project_house_person_rel.personId
            <where>
                and project_house_person_rel.projectId = #{projectId}
                <if test="houseName != null and houseName != ''">
                    AND house.entityName like concat('%', #{houseName},'%')
                </if>
                <if test="unitName != null and unitName != ''">
                    AND unit.entityName like concat('%', #{unitName},'%')
                </if>
                <if test="buildingId != null and buildingId != ''">
                    AND building.entityId = #{buildingId}
                </if>
                <if test="personId != null and personId != ''">
                    AND project_person_info.personId = #{personId}
                </if>

                <if test="unitId != null and unitId != ''">
                    AND unit.entityId = #{unitId}
                </if>
                <if test="houseId != null and houseId != ''">
                    AND house.entityId = #{houseId}
                </if>
                <if test="personName != null and personName != ''">
                    AND project_person_info.personName like concat('%', #{personName},'%')
                </if>
                <if test="phone != null and phone != ''">
                    AND project_person_info.telephone = #{phone}
                </if>
                <if test="auditStatus != null and auditStatus.length >0 ">
                    AND project_house_person_rel.auditStatus in
                    <foreach collection="auditStatus" item="status" open="(" close=")" separator=",">
                        #{status}
                    </foreach>
                </if>
            </where>
            <!-- order by houseName -->
            ORDER BY project_house_person_rel.householdType, project_house_person_rel.createTime

        ) AS house_park_table
        <if test="buildingName != null and buildingName != ''">
        WHERE buildingName like concat('%', #{buildingName},'%')
        </if>
    </select>
    <!--分页身份认证-->
    <select id="pageIdentity" resultType="com.aurine.cloudx.estate.vo.ProjectHousePersonRelRecordVo">
        SELECT * FROM (
            SELECT
            unit.entityName 'unitName',
            house.entityName 'houseName',
            building.entityId 'buildingId',
            project_person_info.personName,
            project_person_info.gender,
            project_person_info.telephone,
            project_house_person_rel.*,
            (
            with recursive r as
            (
            select * from project_frame_info pfi where pfi.entityId = building.entityId
            union all
            select pfi.* from project_frame_info pfi, r where pfi.entityId = r.puid
            ) select group_concat(r.entityName order by level desc SEPARATOR '-') from r GROUP BY projectId ORDER BY level
            ) buildingName
            FROM
            project_frame_info AS house
            INNER JOIN project_frame_info AS unit ON unit.entityId = house.puid
            INNER JOIN project_frame_info AS building ON building.entityId = unit.puid
            INNER JOIN project_house_person_rel ON house.entityId = project_house_person_rel.houseId
            INNER JOIN project_person_info ON project_person_info.personId = project_house_person_rel.personId
            <where>
                and project_house_person_rel.origin <![CDATA[<>]]>  '1'
                and project_house_person_rel.projectId = #{projectId}
                <if test="houseName != null and houseName != ''">
                    AND house.entityName like concat('%', #{houseName},'%')
                </if>
                <if test="unitName != null and unitName != ''">
                    AND unit.entityName like concat('%', #{unitName},'%')
                </if>
                <if test="personName != null and personName != ''">
                    AND project_person_info.personName like concat('%', #{personName},'%')
                </if>
                <if test="houseId != null and houseId != ''">
                    AND project_house_person_rel.houseId = #{houseId}
                </if>
                <if test="phone != null and phone != ''">
                    AND project_person_info.telephone = #{phone}
                </if>
                <if test="auditStatus != null and auditStatus.length >0 ">
                    AND project_house_person_rel.auditStatus in
                    <foreach collection="auditStatus" item="status" open="(" close=")" separator=",">
                        #{status}
                    </foreach>
                </if>
            </where>
            order by project_house_person_rel.householdType, project_house_person_rel.createTime
        ) AS identity_table
        <if test="buildingName != null and buildingName != ''">
            WHERE buildingName like concat('%', #{buildingName},'%')
        </if>
        order by createTime desc
    </select>
    <select id="findPageByHouseId" resultType="com.aurine.cloudx.estate.vo.ProjectHousePersonRelRecordVo">
        SELECT unit.entityName 'unitName',
        house.entityName 'houseName',
        house.entityId 'houseId',
        building.entityId 'buildingId',
        info.personName,
        info.gender,
        info.credentialPicBack,
        info.credentialPicFront,
        rel.relaId,
        rel.houseId,
        rel.personId,
        rel.housePeopleRel,
        rel.householdType,
        rel.memberType,
        rel.checkInTime,
        rel.rentStartTime,
        rel.rentStopTime,
        rel.isOwner,
        rel.status,
        rel.auditStatus,
        rel.auditReason,
        (
        with recursive r as
        (
        select *
        from project_frame_info pfi
        where pfi.entityId = building.entityId
        union all
        select pfi.*
        from project_frame_info pfi,
        r
        where pfi.entityId = r.puid
        )
        select group_concat(r.entityName order by level desc SEPARATOR '-')
        from r
        GROUP BY projectId
        ORDER BY level
        ) buildingName
        FROM project_frame_info AS house
        INNER JOIN project_frame_info AS unit ON unit.entityId = house.puid and unit.isUnit = 1
        INNER JOIN project_frame_info AS building ON building.entityId = unit.puid and building.isBuilding = 1
        INNER JOIN project_house_person_rel rel ON house.entityId = rel.houseId
        INNER JOIN project_person_info info ON info.personId = rel.personId
        where rel.houseId = #{houseId}
        and rel.projectId = #{projectId}
        order by rel.householdType ,rel.createTime
    </select>
    <select id="findPageById" resultType="com.aurine.cloudx.estate.vo.ProjectHousePersonRelRecordVo">
        SELECT unit.entityName 'unitName',
        house.entityName 'houseName',
        house.entityId 'houseId',
        building.entityId 'buildingId',
        info.personName,
        info.gender,
        rel.relaId,
        rel.houseId,
        rel.personId,
        rel.housePeopleRel,
        rel.householdType,
        rel.memberType,
        rel.checkInTime,
        rel.rentStartTime,
        rel.rentStopTime,
        rel.isOwner,
        rel.status,
        rel.auditStatus,
        rel.auditReason,
        (
        with recursive r as
        (
        select *
        from project_frame_info pfi
        where pfi.entityId = building.entityId
        union all
        select pfi.*
        from project_frame_info pfi,
        r
        where pfi.entityId = r.puid
        )
        select group_concat(r.entityName order by level desc SEPARATOR '-')
        from r
        GROUP BY projectId
        ORDER BY level
        ) buildingName
        FROM project_frame_info AS house
        INNER JOIN project_frame_info AS unit ON unit.entityId = house.puid
        INNER JOIN project_frame_info AS building ON building.entityId = unit.puid
        INNER JOIN project_house_person_rel rel ON house.entityId = rel.houseId
        INNER JOIN project_person_info info ON info.personId = rel.personId
        where rel.personId = #{personId}
        and rel.projectId = #{projectId}
        order by rel.householdType ,rel.createTime
    </select>
    <select id="findByName" resultType="com.aurine.cloudx.estate.vo.ProjectHouseHisRecordVo">
        select rel.relaId,
        rel.houseId,
        rel.projectId,
        rel.personId,
        rel.housePeopleRel,
        rel.householdType,
        rel.memberType,
        rel.checkInTime,
        rel.rentStartTime,
        rel.rentStopTime,
        rel.status,
        rel.tenant_id,
        rel.operator,
        rel.createTime,
        rel.updateTime,
        rel.auditStatus,
        house.entityName houseName,
        unit.entityName unitName,
        (
        with recursive r as
        (
        select *
        from project_frame_info pfi
        where pfi.entityId = building.entityId
        union all
        select pfi.*
        from project_frame_info pfi,
        r
        where pfi.entityId = r.puid
        )
        select group_concat(r.entityName order by level desc SEPARATOR '-')
        from r
        GROUP BY projectId
        ORDER BY level
        )
        buildingName,
        info.personName,
        info.telephone
        from project_house_person_rel rel
        inner join project_frame_info AS house ON house.entityId = rel.houseId
        INNER JOIN project_frame_info AS unit ON unit.entityId = house.puid
        INNER JOIN project_frame_info AS building ON building.entityId = unit.puid
        INNER JOIN project_person_info info ON info.personId = rel.personId
        where info.personName = #{name}
        and rel.projectId = #{projectId}
        and rel.status = '1'
        and rel.auditStatus='2'
        and (
        (rel.householdType = '3'
        and rel.rentStopTime <![CDATA[>=]]> now())
        or rel.householdType != '3')
        order by rel.householdType ,rel.createTime
    </select>
    <select id="listHouseByPersonId" resultType="com.aurine.cloudx.estate.dto.ProjectHouseDTO">
        select rel.houseId,
        house.entityName houseName,
        house.entityId houseId,
        unit.entityName unitName,
        unit.entityId unitId,
        (
        with recursive r as
        (
        select *
        from project_frame_info pfi
        where pfi.entityId = building.entityId
        union all
        select pfi.*
        from project_frame_info pfi,
        r
        where pfi.entityId = r.puid
        )
        select group_concat(r.entityName order by level desc SEPARATOR '-')
        from r
        GROUP BY projectId
        ORDER BY level
        )
        buildingName,
        building.entityId buildingId,
        rel.auditStatus,
        phi.houseCode
        from project_house_person_rel rel
        inner join project_frame_info AS house ON house.entityId = rel.houseId and house.isHouse = 1
        INNER JOIN project_frame_info AS unit ON unit.entityId = house.puid and unit.isUnit = 1
        INNER JOIN project_frame_info AS building ON building.entityId = unit.puid and building.isBuilding = 1
        inner join project_house_info phi on rel.houseId = phi.houseId
        where rel.personId = #{personId}
        and rel.projectId = #{projectId}
        order by rel.householdType ,rel.createTime
    </select>
    <select id="filterPageById" resultType="com.aurine.cloudx.estate.vo.ProjectHousePersonRelRecordVo">
         SELECT unit.entityName 'unitName',
        house.entityName 'houseName',
        house.entityId 'houseId',
        building.entityId 'buildingId',
        info.personName,
        info.gender,
        rel.relaId,
        rel.houseId,
        rel.personId,
        rel.housePeopleRel,
        rel.householdType,
        rel.memberType,
        rel.checkInTime,
        rel.rentStartTime,
        rel.rentStopTime,
        rel.isOwner,
        rel.status,
        rel.auditStatus,
        rel.auditReason,
        (
        with recursive r as
        (
        select *
        from project_frame_info pfi
        where pfi.entityId = building.entityId
        union all
        select pfi.*
        from project_frame_info pfi,
        r
        where pfi.entityId = r.puid
        )
        select group_concat(r.entityName order by level desc SEPARATOR '-')
        from r
        GROUP BY projectId
        ORDER BY level
        ) buildingName
        FROM project_frame_info AS house
        INNER JOIN project_frame_info AS unit ON unit.entityId = house.puid
        INNER JOIN project_frame_info AS building ON building.entityId = unit.puid
        INNER JOIN project_house_person_rel rel ON house.entityId = rel.houseId
        INNER JOIN project_person_info info ON info.personId = rel.personId
        where rel.personId = #{personId}
        and rel.projectId = #{projectId}
        <if test="status!=null and status!=''">
            and rel.auditStatus = ${status}
        </if>
        order by rel.householdType ,rel.createTime
    </select>

    <select id="getProjectStaff" resultType="java.lang.String">
        SELECT staff.staffId
        FROM pigxx.sys_menu menu
                 LEFT JOIN pigxx.sys_role_menu role_menu ON role_menu.menu_id = menu.menu_id
                 LEFT JOIN project_staff staff ON staff.roleId = role_menu.role_id
        WHERE menu.menu_id = #{menuId}
          AND staffId IS NOT NULL
          AND staff.projectId = #{projectId}
    </select>

    <select id="getAddress" resultType="com.aurine.cloudx.estate.vo.ProjectHouseAddressVo">
        SELECT DISTINCT
            *
        FROM
            (

                SELECT
                    house.entityId houseId,
                    (
                        WITH recursive r AS (
                            SELECT
                                *
                            FROM
                                project_frame_info pfi
                            WHERE
                                pfi.entityId = house.entityId UNION ALL
                            SELECT
                                pfi.*
                            FROM
                                project_frame_info pfi,
                                r
                            WHERE
                                pfi.entityId = r.puid
                        ) SELECT
                            group_concat( r.entityName ORDER BY LEVEL DESC SEPARATOR '-' )
                        FROM
                            r
                        GROUP BY
                            projectId
                        ORDER BY
                            LEVEL
                    ) address
                FROM
                    project_frame_info AS house
                        LEFT JOIN project_frame_info AS unit ON unit.entityId = house.puid
                        LEFT JOIN project_frame_info AS building ON building.entityId = unit.puid
                        LEFT JOIN project_house_person_rel ON house.entityId = project_house_person_rel.houseId
                        LEFT JOIN project_person_info ON project_person_info.personId = project_house_person_rel.personId
                WHERE
                    house.entityId = #{houseId}
            ) houseAddressTable
    </select>

    <select id="getProjectName" resultType="java.lang.String">
        select name from pigxx.sys_dept where dept_id = #{projectId}
    </select>
</mapper>
